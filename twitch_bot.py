import os
import logging
import requests
import redis
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
    MessageHandler,
    Filters
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = '8049016680:AAFo45bEX8HlSnKiX_bfnYY_KhaWaUJu7PE'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TWITCH_CLIENT_ID = 'w2y2t05i7iwk43yj6ncyvtvnqzmkze'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Twitch Client ID
TWITCH_CLIENT_SECRET = 'egxo7iiha9dhv6ap4z1k4rvfpltbzg'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Twitch Client Secret
TWITCH_USERNAMES = ['axelencore', 'yatoencoree', 'julia_encore', 'aliseencore', 'hotabych4', 'waterspace17']  # –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
CHECK_INTERVAL = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∏–º–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis
REDIS_URL = os.getenv('REDIS_URL')
redis_client = redis.Redis.from_url(REDIS_URL)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –∏ "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
reply_keyboard = [
    [KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è")]
]
main_reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OAuth —Ç–æ–∫–µ–Ω–∞ Twitch
def get_twitch_oauth_token():
    url = 'https://id.twitch.tv/oauth2/token'
    params = {
        'client_id': TWITCH_CLIENT_ID,
        'client_secret': TWITCH_CLIENT_SECRET,
        'grant_type': 'client_credentials'
    }
    response = requests.post(url, params=params)
    response.raise_for_status()
    return response.json()['access_token']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∏–º–æ–≤
def check_streams(context: CallbackContext):
    twitch_oauth_token = get_twitch_oauth_token()
    headers = {
        'Client-ID': TWITCH_CLIENT_ID,
        'Authorization': f'Bearer {twitch_oauth_token}'
    }
    params = [('user_login', username) for username in TWITCH_USERNAMES]
    response = requests.get('https://api.twitch.tv/helix/streams', headers=headers, params=params)
    data = response.json()
    active_streams = [stream['user_login'] for stream in data.get('data', [])]

    subscribers = redis_client.smembers('subscribers')
    for chat_id_bytes in subscribers:
        chat_id = chat_id_bytes.decode()
        subscriptions = redis_client.smembers(f'subscriptions:{chat_id}')
        subscriptions = {s.decode() for s in subscriptions}
        for streamer in subscriptions:
            if streamer in active_streams:
                notified_key = f'notified:{chat_id}:{streamer}'
                if not redis_client.exists(notified_key):
                    message = f"üî¥ {streamer} —Å–µ–π—á–∞—Å –≤ —ç—Ñ–∏—Ä–µ!\n–ó–∞–≥–ª—è–¥—ã–≤–∞–π –Ω–∞ —Å—Ç—Ä–∏–º: https://twitch.tv/{streamer}"
                    context.bot.send_message(chat_id=int(chat_id), text=message, reply_markup=main_reply_markup)
                    redis_client.set(notified_key, '1')
            else:
                redis_client.delete(f'notified:{chat_id}:{streamer}')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext):
    chat_id = str(update.effective_chat.id)
    redis_client.sadd('subscribers', chat_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    message = context.bot.send_photo(
        chat_id=chat_id,
        photo="https://axelencore.ru/wp-content/uploads/2024/09/Oreo.jpg",  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Oreo - —É–≤–µ–¥–æ–º–ª—è—é –æ —Å—Ç—Ä–∏–º–∞—Ö —Å–µ–º—å–∏ Encore.",
        reply_markup=main_reply_markup
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
    send_subscribe_options(update, context)

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
    try:
        context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è /start: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def text_message_handler(update: Update, context: CallbackContext):
    chat_id = str(update.effective_chat.id)
    text = update.message.text

    if text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è":
        delete_previous_bot_message(chat_id, context)
        send_subscribe_options(update, context)
    elif text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
        delete_previous_bot_message(chat_id, context)
        send_unsubscribe_options(update, context)
    else:
        context.bot.send_message(chat_id=chat_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=main_reply_markup)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –∏–ª–∏ "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
    if text in ["–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"]:
        try:
            context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
def send_subscribe_options(update: Update, context: CallbackContext):
    chat_id = str(update.effective_chat.id)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    keyboard = []
    for streamer in TWITCH_USERNAMES:
        keyboard.append([InlineKeyboardButton(streamer, callback_data=f'subscribe:{streamer}')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    message = context.bot.send_message(
        chat_id=chat_id,
        caption="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=reply_markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    redis_client.set(f'last_message:{chat_id}', message.message_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–ø–∏—Å–∫–∏
def send_unsubscribe_options(update: Update, context: CallbackContext):
    chat_id = str(update.effective_chat.id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscriptions = redis_client.smembers(f'subscriptions:{chat_id}')
    subscriptions = [s.decode() for s in subscriptions]

    if not subscriptions:
        context.bot.send_message(chat_id=chat_id, text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞.", reply_markup=main_reply_markup)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
    keyboard = []
    for streamer in subscriptions:
        keyboard.append([InlineKeyboardButton(streamer, callback_data=f'unsubscribe:{streamer}')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–ø–∏—Å–∫–∏
    message = context.bot.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:",
        reply_markup=reply_markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    redis_client.set(f'last_message:{chat_id}', message.message_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
def delete_previous_bot_message(chat_id, context):
    message_id = redis_client.get(f'last_message:{chat_id}')
    if message_id:
        try:
            context.bot.delete_message(chat_id=int(chat_id), message_id=int(message_id))
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        finally:
            redis_client.delete(f'last_message:{chat_id}')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
def button(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    chat_id = str(query.message.chat.id)

    if data.startswith('subscribe:'):
        streamer = data.split(':', 1)[1]
        if not redis_client.sismember(f'subscriptions:{chat_id}', streamer):
            redis_client.sadd(f'subscriptions:{chat_id}', streamer)
            query.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {streamer}")
        else:
            query.answer(f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {streamer}")
    elif data.startswith('unsubscribe:'):
        streamer = data.split(':', 1)[1]
        if redis_client.sismember(f'subscriptions:{chat_id}', streamer):
            redis_client.srem(f'subscriptions:{chat_id}', streamer)
            query.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {streamer}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
            subscriptions = redis_client.smembers(f'subscriptions:{chat_id}')
            subscriptions = [s.decode() for s in subscriptions]
            if subscriptions:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = []
                for s in subscriptions:
                    keyboard.append([InlineKeyboardButton(s, callback_data=f'unsubscribe:{s}')])
                reply_markup = InlineKeyboardMarkup(keyboard)
                query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:", reply_markup=reply_markup)
            else:
                query.edit_message_text(text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞.")
        else:
            query.answer(f"–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {streamer}")
    else:
        query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CallbackQueryHandler(button))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, text_message_handler))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∏–º–æ–≤
    job_queue = updater.job_queue
    job_queue.run_repeating(check_streams, interval=CHECK_INTERVAL, first=10)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
